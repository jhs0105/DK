@import "vars";
@import "mixins";

//변수사용하면 한번에 바뀌니 편하다.

#main-visual {
  overflow: hidden;
  .list {
    li {
      height: 100vh;
      background-size: cover;
      background-position: 50%;
      background-repeat: no-repeat;
    }

    //for(let i=1; i<=3; i++){

    //}
    //이미지가 3,4개 정도면 그냥 쓰지만 아주 많을 경우는 아래와 같이 쓴다.
    //변수설정해서: scss에서 문자 보간 #{$변수}
    @for $i from 1 through 5 {
      .visual0#{$i} {
        background-image: url("../images/main/visual0#{$i}.jpg");
      }
    }

    // .visual01 {
    //   background-image: url("../images/main/visual01.jpg");
    // }
    // .visual02 {
    //   background-image: url("../images/main/visual02.jpg");
    // }
    // .visual03 {
    //   background-image: url("../images/main/visual03.jpg");
    // }
    // .visual04 {
    //   background-image: url("../images/main/visual04.jpg");
    // }
  }
  .btns {
    position: absolute; //넓이는 최소단위로 줄어든다. 늘리고 싶으면 width준다.
    left: 100px;
    bottom: 50px;
    z-index: 2;
    width: 200px;
    display: flex;
    justify-content: space-between;
  }
  .btn {
    // position: absolute;
    // top: 50%;
    color: white;
    font-size: $h3;
    // z-index: 2;
    // &-next {
    //   right: 50px;
    // }
    // &-prev {
    //   left: 50px;
    // }
  }
}

#quick-menu {
  .container {
    display: flex;
    h2 {
      height: 120px;
      width: 25%;
      // background-color: #999;
      @include flex;
      text-transform: uppercase;
      font-size: $h3;
      background-color: $main-color;
      color: white;
      @include longShadow(100, darken($main-color, 10));
      overflow: hidden;
    }
    ul {
      display: flex;
      width: 75%;
      li {
        width: calc(100% / 3);
        border-left: 1px solid #ccc;
        &:last-child {
          border-right: 1px solid #ccc;
        }
        // &:nth-child(1) a:before {
        //   background-image: url("../images/main/quick-icon2.png");
        // }
        // &:nth-child(2) a:before {
        //   background-image: url("../images/main/quick-icon3.png");
        // }
        // &:nth-child(3) a:before {
        //   background-image: url("../images/main/quick-icon4.png");
        // }
        @for $i from 1 through 3 {
          &:nth-child(#{$i}) a:before {
            background-image: url("../images/main/quick-icon#{$i+1}.png");
          }
        }

        a {
          height: 120px;
          @include flex;
          &:before {
            content: "";
            display: block;
            width: 48px;
            height: 48px;
            // background-color: rgb(112, 112, 112);
            background-repeat: no-repeat;
            background-position: 50%;
          }
        }
      }
    }
  }
}

.section {
  .title-box {
    width: 340px;
    .title {
      h2 {
        text-transform: uppercase;
        font-size: $h1;
        margin-bottom: 40px;
        color: $main-color;
      }
      p {
        line-height: 1.5;
        font-size: 18px;
      }
      &:after {
        content: "";
        display: block;
        width: 100px;
        height: 2px;
        background-color: $main-color;
        margin: 30px 0;
      }
    }
    .btns {
      display: flex; //flex넣어주면 button(inline)이 서로 붙는다. flex안하면 inline은 4px정도 떨어져있다.
      .btn {
        width: 60px;
        height: 60px;
        background-color: white;
        border: 1px solid #999;
        &-next {
          border-left: none; //혹은 margin-left: -1px;을 써서 선을 겹칠수 있다.
        }
      }
    }
  }
}

#project {
  overflow: hidden;
  position: relative;
  padding: 200px 0 300px 0;
  background-color: #eee;
  .container {
    position: relative;
  }
  .banner {
    width: 100vw;
    position: absolute;
    left: 340px;
    top: 0;
    overflow: hidden;

    .mask {
      overflow: hidden;
      padding-bottom: 50px;
    }
    ul {
      li {
        width: 400px; // (중요)너비를 가져야만 swiper의 auto를 쓸수 있다.
        .contents {
          img {
            width: 100%;
            height: 280px; //이렇게 width & height을 지정해 줘야 다른 사이즈의 이미지도 맞춰져서 들어감
            object-fit: cover;
          }
        }
        &:hover .popup {
          top: 150px;
          opacity: 1;
          pointer-events: auto;
          box-shadow: 10px 10px 10px grey;
        }
      }
    }
  }

  li {
    .info,
    .popup {
      background-color: white;
      padding: 30px;

      h3 {
        font-size: $h3;
        font-weight: 500;
        margin-bottom: 20px;
      }
      dl {
        display: flex; //flex하면 너비가 최소 단이로 주니깐 width를 준다
        margin: 15px 0;
        dt {
          width: 80px;
          font-weight: 500;
        }
        dd {
          color: #666;
          width: calc(100% - 80px); //width를 설정하면 dd의 내용이 많아져도 dt를 침범하지 않는다
          @include ellipsis; //<2줄이든, 3줄이든 뭐든 1줄 처리가 된다!
        }
      }
    }
    .popup {
      position: absolute;
      width: 100%;
      top: 300px;
      box-sizing: border-box; //이걸 써야 width에 padding값이 더해져 커지지 않는다!! width를 주고 padding을 주면 width + padding이 된다. 그러니 box-sizing을 하면 width안에 padding이 들어간다!!
      opacity: 0;
      padding: 50px 30px;
      transition: all 0.3s ease;
      pointer-events: none; // 이렇게 되면 덜덜 떨리는게 작동 안하지만..a버튼이 작동 안함 그래서 hover로 popup뜰때 pointer-event를 auto처리 하면 popup뜰때 만 작동함.
      a {
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: $main-color;
        color: #fff;
        margin-top: 30px;
        padding: 20px 0;

        @include longShadow(50, darken($main-color, 10));
        overflow: hidden;
      }
    }
  }
}

.roll {
  display: block; //block처리만 하면 부모 넓이를 따라가니 width를 줘야 한다.
  width: 240px;
  height: 60px;
  margin-top: 100px;
  border: 1px solid #fff;
  @include flex;
  transition: all 0.5s ease;

  div {
    overflow: hidden;
    font-weight: 700;
    text-shadow: 0 1.5em 0 lighten($main-color, 20);
    display: flex;
    justify-content: center;
    span {
      display: block;
      transition: 0.25s ease;
      @for $i from 1 through 15 {
        &:nth-child(#{$i}) {
          transition-delay: $i * 0.05s;
        }
      }
    }
  }

  &:hover {
    background-color: $main-color;
    border-color: $main-color;
    div {
      span {
        transform: translateY(-1.5em);
      }
    }
  }
}

#about {
  position: relative;
  padding: 200px 0 100px;
  .title {
    h2 {
      color: #fff;
    }
    &:after {
      background-color: #fff;
    }
  }
  .container {
    z-index: 2; //position을 가져야 z-index를 쓸 수 있다.
    position: relative;
  }
  .banner {
    position: absolute;
    width: 100%;
    left: 0;
    top: 0;
    height: 100vh;
    .list li {
      height: 100vh;
      background-repeat: no-repeat;
      background-size: cover;
      .txt {
        color: white;
        padding-top: 350px;
        p {
          font-size: $h1;
          line-height: 1.2;
          font-weight: 300;
        }
      }
    }
    .visual01 {
      background-image: url("../images/main/dk-bg.jpg");
    }
    .visual02 {
      background-image: url("../images/main/loge-bg.jpg");
    }
    .pagination {
      position: absolute;
      z-index: 2;
      top: 200px;
      left: 30%;
      width: auto; //자식너비 만큼 줄어든다.
      bottom: auto; //auto처리하면 bottom 잡힌게 없어진다.

      .swiper-pagination-bullet {
        width: auto; //내용에 따라서 넓어진다.
        background: none;
        font-size: $h3;
        color: white;
        opacity: 1;
        em {
          opacity: 0.2;
        }
        &-active {
          em {
            opacity: 1;
          }
        }
        &:nth-child(2) {
          padding-left: 30px;
          position: relative;
        }
        &:nth-child(2):before {
          content: "";
          display: inline-block;

          width: 10px;
          height: 10px;
          background-color: #fff;
          position: absolute;
          left: 7px;
          top: 5px;
          transform: rotate(45deg); //rotate에서는 deg를 써야 한다.
        }
      }
    }
  }
  .business {
    margin-top: 500px;
    ul {
      display: flex;
      flex-wrap: wrap; //이걸해야 아래로 떨어진다.!!! width에 맞게 분리됨
      justify-content: space-between;
      li {
        position: relative;
        margin-bottom: 30px;
        overflow: hidden;
        // &:before {
        //   content: "";
        //   display: block;
        //   border: 1px solid #fff;
        //   left: 20px;
        //   right: 20px;
        //   bottom: 20px;
        //   top: 20px;
        //   position: absolute;
        //   opacity: 0;
        //   z-index: 2;
        //   transition: all 0.25s ease;
        // }

        &:before {
          content: "";
          display: block;
          position: absolute;
          left: 0;
          top: 0;
          right: 0;
          bottom: 0;
          box-shadow: inset 0 0 0 0 rgba(255, 255, 255, 1);
          z-index: 12;
          transition: all 0.25s ease;
          pointer-events: none;
        }

        img {
          transition: all 0.3s ease;
        }
        &:hover {
          img {
            transform: scale(1.3);
          }
          &:before {
            //opacity: 1;
            box-shadow: inset 0 0 0 10px rgba(255, 255, 255, 1);
          }
        }
        .title {
          position: absolute;
          right: 0;
          bottom: 0;
          background-color: white;
          padding: 30px;
          width: 240px; //박스 사이즈가 다 같으면 width를 설정해야 한다.padding만 주면 박스가 다 제각각의 넓이를 가짐
          height: 120px;
          box-sizing: border-box;
          strong {
            display: block;
            font-size: $h3;
            font-weight: 700;
            margin-bottom: 20px;
          }
        }
      }
    }
  }
}

#news {
  padding: 0;
  position: relative;
  .container {
    position: relative;
    display: flex;
    .banner {
      width: calc(100% - 340px); //너비를 주면 title-box를 침범 안한다.
      .mask {
        overflow: hidden;
        //position이 absolute일때 무한정으로 길어지는게 발생한다.swiper의 부모가 넓이를 가져야 무한정으로 길어지지 않는다. 뭔가 무한정으로 길어지고 그러면 길어진 방향으로 너비를 확정지어야 한다.
        height: 230px * 3; //vertical일때 꼭 부모에게 높이 줘야 한당!
      }
      ul {
        margin-top: -40px;
        li {
          padding: 40px 0;
          border-bottom: 1px solid #ccc;
          // height: auto; //vertical이니 height에 높이를 줘야 swiper auto처리 가능
          height: 230px;
          box-sizing: border-box;

          a {
            display: flex;
            align-items: center;
            &:hover {
              text-decoration: underline;
            }
            img {
              height: 230px - 80px;
            }
            .txt {
              margin-left: 50px;
              h3 {
                font-size: $h3;
                margin-bottom: 20px;
                @include ellipsis;
                span {
                  font-size: $h3/1.5;
                  vertical-align: middle;
                  font-weight: 500;
                  color: $main-color;
                  display: inline-block; //글자처럼 취급하지만 block처럼 padding 등 가질수 있다.
                  margin-right: 10px;
                  margin-top: -3px;
                }
              }
              p {
                @include multiElilipsis(2);
              }
            }
          }
        }
      }
    }
    .roll {
      border-color: $main-color;
      margin-top: 50px;
      color: $main-color;
    }
  }
}

#pr {
  padding: 200px 0;
  background-color: lighten($main-color, 20);
  overflow: hidden;
  .container {
    position: relative;
  }
  .title {
    p {
      opacity: 0.75;
    }
  }
  .roll {
    color: white;
  }
  .banner {
    width: 100vw;
    position: absolute;
    left: 340px;
    top: 0;
    overflow: hidden;
    .mask {
      overflow: hidden;
      padding-bottom: 50px;
    }
    ul {
      li {
        $w: 700px; //변수 설정가능
        width: $w;
        height: 500px;
        iframe {
          width: $w;
          height: $w * 0.5625;
        }
      }
    }
  }
}

#footer {
  background-color: #333;
  color: white;
  .container {
    width: 1780px;
  }
  .util-box {
    padding: 50px 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.5);
    display: flex;
    justify-content: space-between;
    align-items: center;
    .util {
      position: relative;
      color: #fff;
      ul {
        height: auto; //auto처리하면 원래 자기의 높이 만큼만 가진다!
        li {
          &:nth-last-child(1) a {
            padding-right: 0;
          }
          a {
            font-size: 16px;
          }
        }
      }
    }
  }
  .addr-box {
    padding: 50px 0;
    display: flex;
    justify-content: space-between;
    address {
      line-height: 1.5;
      font-size: 14px;
      .copyright {
        margin-top: 30px;
        opacity: 0.5;
      }
    }
    .family-site {
      font-size: 14px;
      position: relative;
      button,
      li a {
        width: 200px;
        height: 40px;
        border: 1px solid #fff;
        text-transform: uppercase;
        color: white;
        box-sizing: border-box;
        @include flex;
        background-color: darken(#333, 10);
        border-color: rgb(78, 78, 78);
      }
      ul {
        position: absolute;
        bottom: 40px;
        margin-bottom: -1px;
        opacity: 0;
        // transform: translateY(-50px);
        transition: all 0.25s ease;
        pointer-events: none;

        li {
          margin-top: -1px;
        }
      }
      &.on {
        ul {
          pointer-events: auto;
          transform: translateY(0);
          opacity: 1;
        }
      }
    }
  }
}
